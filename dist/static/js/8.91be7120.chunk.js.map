{"version":3,"sources":["pages/shop/Shop.component.jsx"],"names":["CollectionsOverviewContainer","lazy","CollectionPageContainer","connect","dispatch","fetchCollectionStart","match","useEffect","className","fallback","exact","path","component"],"mappings":"8HAAA,mEAUMA,GAVN,OAUqCC,gBAAK,kBAAM,kCAC1CC,EAA0BD,gBAAK,kBAAM,iCAsB5BE,sBAAQ,MAJI,SAACC,GAAD,MAAe,CACzCC,qBAAsB,kBAAMD,EAASC,mBAGvBF,EApBE,SAAC,GAAqC,IAAnCE,EAAkC,EAAlCA,qBAAsBC,EAAY,EAAZA,MAIzC,OAHAC,qBAAU,WACTF,MACE,CAACA,IAEH,yBAAKG,UAAU,aACT,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAW,kBAAC,IAAD,OACvB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,UAAML,EAAMK,MAASC,UAAYZ,IAChD,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAI,UAAML,EAAMK,KAAZ,kBAAmCC,UAAYV","file":"static/js/8.91be7120.chunk.js","sourcesContent":["import React, { useEffect, lazy, Suspense } from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { fetchCollectionStart } from '../../redux/shop/shops.actions'\r\n\r\nimport ErrorBoundary from '../../components/error-boundary/Error.boundary.component'\r\nimport LoadingSpinner from '../../components/loading-spinner/Loading-spinner.component'\r\n\r\nimport './Shop.scss'\r\nconst CollectionsOverviewContainer = lazy(() => import('../../components/collections-overview/Collections-overview.container'))\r\nconst CollectionPageContainer = lazy(() => import('../collection/Collection.container'))\r\n\r\nconst ShopPage = ({ fetchCollectionStart, match }) => {\r\n\tuseEffect(() =>{\r\n\t\tfetchCollectionStart()\r\n\t}, [fetchCollectionStart])\r\n\treturn(\r\n\t\t<div className='shop-page'>\r\n        <ErrorBoundary>\r\n          <Suspense fallback={ <LoadingSpinner /> }>\r\n\t\t     \t<Route exact path={ `${match.path}` } component={ CollectionsOverviewContainer } />\r\n\t\t        <Route exact path={ `${match.path}/:collectionId` } component={ CollectionPageContainer } />\r\n     \t  </Suspense>\r\n        </ErrorBoundary>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tfetchCollectionStart: () => dispatch(fetchCollectionStart())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SECOND\r\n// import React from 'react'\r\n// import { Route } from 'react-router-dom'\r\n// import { connect } from 'react-redux'\r\n\r\n// import { fetchCollectionStartAsync } from '../../redux/shop/shops.actions'\r\n// import { selectIsCollectionFetching, selectIsCollectionLoaded } from '../../redux/shop/shop.selector'\r\n\r\n\r\n// import WithSpinner from '../../components/with-spinner/With-spinner.component'\r\n// import CollectionsOverview from '../../components/collections-overview/Collections-overview.component'\r\n// import CollectionPage from '../collection/Collection.component'\r\n\r\n// import './Shop.scss'\r\n\r\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview)\r\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage)\r\n\r\n// // now all getting handled by a reducer\r\n\r\n// class ShopPage extends React.Component {\r\n// \tcomponentDidMount(){\r\n// \t\tconst { fetchCollectionStartAsync } = this.props\r\n// \t\t// we will call it the moment component mount\r\n// \t\tfetchCollectionStartAsync()\r\n// \t}\r\n\t\r\n// \trender(){\r\n// \t\tconst { match, isCollectionsFetching, isCollectionsLoaded } = this.props\r\n// \t\treturn(\r\n// \t\t\t<div className='shop-page'>\r\n// \t\t     \t<Route \r\n// \t\t\t        exact path={ `${match.path}` } \r\n// \t\t\t        render={(props) => <CollectionsOverviewWithSpinner isLoading={ isCollectionsFetching } { ...props } />} \r\n// \t\t        />\r\n\r\n// \t\t         <Route \r\n// \t\t\t        exact path={ `${match.path}/:collectionId` } \r\n// \t\t\t        render={(props) => <CollectionPageWithSpinner isLoading={ !isCollectionsLoaded } { ...props } />} \r\n// \t\t        />\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn(\r\n// \t\t\t{\r\n// \t\t\t\tisCollectionsFetching: selectIsCollectionFetching(state),\r\n// \t\t\t\tisCollectionsLoaded: selectIsCollectionLoaded(state)\r\n// \t\t\t}\r\n// \t)\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n// \treturn(\r\n// \t\t\t{\r\n// \t\t\t\tfetchCollectionStartAsync: () => {\r\n// \t\t\t\t\tdispatch(fetchCollectionStartAsync())\r\n// \t\t\t}\r\n// \t\t}\r\n// \t)\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ShopPage)\r\n\r\n\r\n\r\n\r\n// FIRSTTTTTTTTTT\r\n\r\n// import React from 'react'\r\n// import { Route } from 'react-router-dom'\r\n// import { connect } from 'react-redux'\r\n\r\n// import  { firestore, convertCollectionSnapshotToMap } from '../../firebase/Firebase.utils'\r\n// import { updateCollections } from '../../redux/shop/shops.actions'\r\n\r\n// import WithSpinner from '../../components/with-spinner/With-spinner.component'\r\n\r\n// import CollectionsOverview from '../../components/collections-overview/Collections-overview.component'\r\n// import CollectionPage from '../collection/Collection.component'\r\n// import './Shop.scss'\r\n\r\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview)\r\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage)\r\n\r\n// class ShopPage extends React.Component {\r\n// \tstate = {\r\n// \t\tloading: true\r\n// \t};\r\n\r\n// \tunsubscribeFromSnapshot = null\r\n\r\n// \tcomponentDidMount(){\r\n// \t\tconst { updatecollections } = this.props\r\n// \t\tconst collectionReference = firestore.collection('collections')\r\n\r\n// \t\t// fetch('https://firestore.googleapis.com/v1/projects/ecommerce-f6276/databases/(default)/documents/collections')\r\n// \t\t// .then(response => response.json())\r\n// \t\t// .then(collections => console.log(collections, 'fetch'))\r\n\r\n// \t\tcollectionReference.get().then(snapshot => {\r\n// \t\t\t// collectionsMap is now back to original format from array to object\r\n// \t\t\tconst collectionsMap = convertCollectionSnapshotToMap(snapshot)\r\n// \t\t\tupdatecollections(collectionsMap)\r\n// \t\t\tconsole.log(collectionsMap, 'get')\r\n// \t\t\tthis.setState({ loading: false })\r\n// \t\t})\r\n\r\n\r\n// \t}\r\n// \t  // ecommerce-f6276\r\n// \trender(){\r\n// \t\tconst { match } = this.props\r\n// \t\tconst { loading } = this.state\r\n// \t\treturn(\r\n// \t\t\t<div className='shop-page'>\r\n// \t\t     \t<Route \r\n// \t\t\t        exact path={ `${match.path}` } \r\n// \t\t\t        render={(props) => <CollectionsOverviewWithSpinner isLoading={ loading } { ...props } />} \r\n// \t\t        />\r\n\r\n// \t\t         <Route \r\n// \t\t\t        exact path={ `${match.path}/:collectionId` } \r\n// \t\t\t        render={(props) => <CollectionPageWithSpinner isLoading={ loading } { ...props } />} \r\n// \t\t        />\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n\r\n// }\r\n\r\n// // const ShopPage = ({ match }) => {\r\n// // console.log(match, 'shop')\r\n// // return(\r\n// // <div className='shop-page'>\r\n// //     <Route path={ match.path } component={ CollectionsOverview } />\r\n// //     <Route  path={ `${match.path}/:collectionId` } component={ Collection } />\r\n// // </div>\r\n// // )}\r\n\r\n// // const ShopPage = ({ match }) => {\r\n// // \tconsole.log(match, 'shop')\r\n// // \treturn(\r\n// // \t<div className='shop-page'>\r\n// //         <Route path={ match.path } component={ CollectionsOverview } />\r\n// // \t</div>\r\n// // )}\r\n\r\n\r\n\r\n// // state = {\r\n// // \t\tloading: true\r\n// // \t};\r\n\r\n// // \tunsubscribeFromSnapshot = null\r\n\r\n// // \tcomponentDidMount(){\r\n// // \t\tconst { updatecollections } = this.props\r\n// // \t\tconst collectionReference = firestore.collection('collections')\r\n\r\n// // \t\tthis.unsubscribeFromSnapshot = collectionReference.onSnapshot(async snapshot => {\r\n// // \t\t\t// collectionsMap is now back to original format from array to object\r\n// // \t\t\t\tconst collectionsMap = await convertCollectionSnapshotToMap(snapshot)\r\n// // \t\t\t\tupdatecollections(collectionsMap)\r\n// // \t\t\t\tconsole.log(collectionsMap, 'collections')\r\n// // \t\t\t\tcollectionsMap === {} ? this.setState({ loading: true }) : this.setState({ loading: false })\r\n// // \t\t})\r\n// // \t}\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n// \treturn(\r\n// \t\t{\r\n// \t\t\tupdatecollections: (collectionsMap) =>{\r\n// \t\t\t\tdispatch(updateCollections(collectionsMap))\r\n// \t\t\t}\r\n// \t\t}\r\n// \t)\r\n// }\r\n\r\n// export default connect(null, mapDispatchToProps)(ShopPage)\r\n"],"sourceRoot":""}